/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package docs

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.artifacts.PublishArtifact
import org.gradle.api.artifacts.dsl.ArtifactHandler
import org.gradle.api.tasks.TaskContainer
import org.gradle.api.tasks.TaskProvider
import org.gradle.api.tasks.bundling.Jar
import org.gradle.kotlin.dsl.*
import org.jetbrains.dokka.gradle.DokkaTask
import java.io.File
import java.net.URL

/**
 * A simple 'hello world' plugin.
 */
class DocsPlugin : Plugin<Project> {
    override fun apply(project: Project) {

        project.tasks {

            fun modifyIndex(block: (String) -> String) {
                val html = project.name + File.separatorChar + "index.html"
                val index = dokkaHtml.get().outputDirectory.get().resolve(html)
                val newText = block(index.readText())
                index.writeText(newText)
            }

            // add the netlify badge in the lower right corner
            val netlifyBadge by register("netlifyBadge") {
                doLast {
                    modifyIndex { text ->
                        val ofs = text.lastIndexOf("</span>") + 7
                        val badge = """
                          <a href="https://www.netlify.com">
                            <img src="https://www.netlify.com/img/global/badges/netlify-color-accent.svg" alt="Deploys by Netlify" style="vertical-align:middle;margin:10px 10px" />
                          </a>
                        """.trimIndent()
                        text.replaceRange(ofs, ofs, badge)
                    }
                }
            }

//            val githubCorner by register("githubCorner") {
//                doLast {
//                    modifyIndex { text ->
//
//                    }
//                }
//            }

            dokkaHtml {
                dokkaSourceSets.configureEach {
                    sourceLink {
                        localDirectory.set(project.projectDir.resolve("src/main/kotlin"))
                        remoteUrl.set(URL("https://github.com/kotlin-graphics/${project.name}/tree/master/src/main/kotlin"))
                        remoteLineSuffix.set("#L")
                    }
                }
                dependsOn()
                finalizedBy(netlifyBadge)
            }

            val dokkaHtmlJar by register<Jar>("dokkaHtmlJar") {
                dependsOn(dokkaHtml)
                from(dokkaHtml.get().outputDirectory.get())
                archiveClassifier.set("html-doc")
            }

            val dokkaJavadocJar by register<Jar>("dokkaJavadocJar") {
                dependsOn(dokkaJavadoc)
                from(dokkaJavadoc.get().outputDirectory.get())
                archiveClassifier.set("javadoc")
            }

            project.artifacts {
                archives(dokkaJavadocJar)
                archives(dokkaHtmlJar)
            }
        }
    }
}

fun ArtifactHandler.archives(artifactNotation: Any): PublishArtifact = add("archives", artifactNotation)
val TaskContainer.dokkaHtml: TaskProvider<DokkaTask> get() = named<DokkaTask>("dokkaHtml")
val TaskContainer.dokkaJavadoc: TaskProvider<DokkaTask> get() = named<DokkaTask>("dokkaJavadoc")